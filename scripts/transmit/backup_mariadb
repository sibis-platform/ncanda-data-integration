#!/bin/bash -l 
cur_dir=`dirname $0`
config="/fs/storage/share/operations/secrets/.sibis/.sibis-general-config.yml"
backup_src=/fs/storage/mariadb-redcap-archive
backup_lock=/fs/storage/ncanda_redcap_backup.lock
retain_local_copy=${1:-1}
backup_file_glob="redcap_mariadb_backup-*.sql.gz"
fq_backup_src_spec="${backup_src}/${backup_file_glob}"
mariadb_subdir=redcap-mariadb
aes_extension=".aes"
aes_backup_file_glob="${backup_file_glob}${aes_extension}"
s3_backups_to_retain=10

## Load common utils
source $cur_dir/transmit_utils

if [[ -e "$backup_lock" ]]; then
  printf 'Lockfile: %s exists, aborting.\n' "$backup_lock"
  exit 0
else
  printf '%s\n%s\n' "$START_TIME" "$$" > $backup_lock
fi

function remove_lock() {
  rm -rf $backup_lock
  exit 0
}

trap "remove_lock" EXIT

# get most recent archive
archive_file=$(ls -t ${fq_backup_src_spec} 2> /dev/null | head -n 1)
archive_file_aes="${archive_file}${aes_extension}"

if [[ -z "${archive_file}" ]]; then
  printf 'ERROR: No recent archives found\n' 
  exit 1
fi

if [ -f "${archive_file_aes}" ]; then
  printf 'INFO: latest archive already has encrypted version. It should have been backed up already. Retrying.\n'
else
  set -e
  printf 'INFO: encrypting archive before upload.\n'
  aespipe -P ${HOME}/aes/keys -e aes256 < "${archive_file}" > "${archive_file_aes}"
  set +e
fi

upload_to_s3_subdir $archive_file_aes ${retain_local_copy} ${mariadb_subdir} && rm "${archive_file}"
# s3://ncanda/db/redcap-mariadb/redcap*.aes
delete_oldest_files ${mariadb_subdir} ${aes_backup_file_glob} ${s3_backups_to_retain}
