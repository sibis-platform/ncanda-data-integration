#!/usr/bin/env python

##
##  See COPYING file distributed along with the ncanda-data-integration package
##  for the copyright and license terms
##

# Setup command line parser
import argparse
from sibispy import config_file_parser as cfg_parser
from typing import List

def parse_args(input_args: List[str] = None):
    parser = argparse.ArgumentParser( description="Retrieve CSV spreadsheet from WebCNP database at U Penn" )
    parser.add_argument( "-v", "--verbose", help="Verbose operation", action="store_true" )

    period = parser.add_mutually_exclusive_group()
    period.add_argument( "--from-date", help="Retrieve only records from the specific date onwards. Give date as 'YYYY-MM-DD'.", action="store" )
    period.add_argument( "--on-date", help="Retrieve only records from the specific date. Give date as 'YYYY-MM-DD'.", action="store")
    period.add_argument( "--last-month", help="Retrieve only records of the last month.", action="store_true" )
    period.add_argument( "--last-3-months", help="Retrieve only records of the last 3 months.", action="store_true" )
    period.add_argument( "--last-year", help="Retrieve only records of the last year.", action="store_true" )

    parser.add_argument("-p", "--post-to-github", help="Post all issues to GitHub instead of std out.", action="store_true")
    parser.add_argument("--show-browser", help="Show browser", action="store_true")
    
    parser.add_argument("-t","--time-log-dir",
                        help="If set then time logs are written to that directory",
                        action="store",
                        default=None)
    parser.add_argument( "out_dir", help="Directory for output files" )

    args = parser.parse_args()
    return args


args = parse_args()

# Import everything we need from Selenium
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys

import os
import glob
import sys
from time import sleep

import sibispy
from sibispy import sibislogger as slog

slog.init_log(args.verbose, args.post_to_github,'NCANDA Import', 'get_results_selenium', args.time_log_dir)
slog.startTimer1()

# Switch to temp directory
original_wd = os.getcwd()
if not os.path.exists( args.out_dir ):
    os.mkdir( args.out_dir )
os.chdir( args.out_dir )

# Remove old partfiles to avoid infinite wait later
for partfile in glob.glob( '*.csv.part' ):
    os.remove( partfile )

# Check if config file exists - read user name and password if it does, bail otherwise
sibis_session = sibispy.Session()
if not sibis_session.configure() :
    slog.info("get_results_selenium","Error: session configure file was not found")
    sys.exit()

config_parser, err = sibis_session.get_config_sys_parser()
cnp_config = config_parser.get_category('session').get('penncnp')

with sibis_session.connect_server('browser_penncnp', True, not args.show_browser) as browser:
    if not browser: 
        slog.info("get_results_selenium","Error: could not connect to penncnp")
        sys.exit()

    # BATTERY_NAME = '42:  EVIONI2_battery'
    # BATTERY_NAME = "302:  NCANDA"
    BATTERY_NAME = cnp_config['battery']

    # Wait for export form and fill appropriately
    wait = sibis_session.initialize_penncnp_wait()
    export = sibis_session.get_penncnp_export_report(wait)
    if not export:
        sys.exit(1)

    browser.find_element_by_name("incomplete").click()

    # If "from-date" or "on-date" was given, select date and comparison operator
    # If one of the default options was passed, select _that_
    # Otherwise, the "ALL" default is used
    if args.from_date:
        browser.find_element_by_name("date_of_test").send_keys(">>")    # selects ">="
        browser.find_element_by_name("date_of_test_date").send_keys(args.from_date)
    elif args.on_date:
        browser.find_element_by_name("date_of_test").send_keys("=")     # selects "="
        browser.find_element_by_name("date_of_test_date").send_keys(args.on_date)
    elif args.last_month:
        browser.find_element_by_name("date_of_test").send_keys("ll")    # selects "Last Month"
    elif args.last_3_months:
        browser.find_element_by_name("date_of_test").send_keys("lll")   # selects "Last 3 Months"
    elif args.last_year:
        browser.find_element_by_name("date_of_test").send_keys("llll")  # selects "Last Year"

    # 2018-09-04: Need to select right report 
    # After redesign, we need to use the autocomplete input, which doesn't have a unique ID
    # XPATH: /html/body/center/table[2]/tbody/tr[2]/td/center/center/form/table[2]/tbody/tr[7]/td/ul/li[1]/input[2]
    # Better: //select[@id="report_name"]/following-sibling::input[1]
    report_autocomplete_input = browser.find_element_by_xpath('//select[@id="report_name"]/following-sibling::input[1]')
    report_autocomplete_input.click()  # erases the current value, sometimes
    report_autocomplete_input.send_keys(Keys.BACKSPACE * 50)  # ...but just to be sure
    report_autocomplete_input.send_keys(BATTERY_NAME)
    sleep(2)  # The input field can take a bit to load the autocomplete value that we're down-arrowing to
    report_autocomplete_input.send_keys(Keys.DOWN)
    report_autocomplete_input.send_keys(Keys.RETURN)
    # This will set the browser.find_element_by_name('report_name') to the correct value.

    # Click "export" button now.
    export.click()

    # Wait for "Download" link, start download
    download = wait.until(EC.element_to_be_clickable((By.NAME,'download_excel')))
    download.click()
    logout = wait.until(EC.element_to_be_clickable((By.LINK_TEXT,'Logout')))

    # At this point, the file should download and save automatically. We need to wait for that to complete.
    while glob.glob( '*.csv.part' ):
        pass

    # To clean up, log out of CNP system and quit browser
    logout.click()
# sibis_session.disconnect_penncnp()

# Change back to original working directory
os.chdir( original_wd )

slog.takeTimer1("script_time") 
