#!/usr/bin/env python
##
##  See COPYING file distributed along with the ncanda-data-integration package
##  for the copyright and license terms
##
"""
usability_report
======================
This script checks for missing scans and scan sessions. 
"""
from __future__ import print_function
import os
import sys

import redcap
import pandas as pd
import numpy as np
import shutil

fields = ['study_id', 'redcap_event_name','exclude', 'visit_ignore___yes',
          'visit_date','mri_missing', 'mri_xnat_sid','mri_series_t1',
          'mri_series_t2'];

forms=['mr_session_report', 'visit_date',
       'demographics']

def get_project_entry(args=None):
	"""
	Pulls the data from REDCap
	"""
	# Get API key.
	summary_key_file = open(os.path.join(os.path.expanduser("~"),
	                                     '.server_config',
	                                     'redcap-dataentry-token'), 'r')
	summary_api_key = summary_key_file.read().strip()

	# Connect to API.
	project_entry = redcap.Project('https://ncanda.sri.com/redcap/api/',
	                               summary_api_key, verify_ssl=False)
	return project_entry

def data_entry_fields(fields,project,arm):
	"""
	Gets the dataframe containing a specific arm from REDCap
	"""
	# Get a dataframe of fields
	data_entry_raw = project.export_records(fields=fields, forms = forms, format_type='df', events=arm)
	return data_entry_raw

def check_missing_sessions(df,project_df,subject_ids):
    # Create list of subjects
    session_filered_df = df[df['type']=='SESSION']
    subject_list = session_filered_df['case'].tolist()

    # Create list of site ids based on subject list
    subject_ids = subject_ids[subject_ids['System ID'].isin(subject_list)]

    subject_list = subject_ids[' Site ID'].tolist()

    # Create filters for cases that are included
    visit_included = project_df.visit_ignore___yes != 1 # Not consistent with 'exclude'
    mri_collected = project_df.mri_missing != 1
    # Apply filters for results
    results = project_df[visit_included & mri_collected]

    return results[results.index.map(lambda x: x[0] in subject_list)]

def check_missing_scans(df, usability_report, scan):
    # Create list of subjects
    session_filered_df = df[df['type']==scan]
    subject_list = session_filered_df['case'].tolist()

    return_df = usability_report[usability_report['subject_id'].isin(subject_list)]

    df_subject_list = usability_report['subject_id'].tolist()

    for s in subject_list:
        if s in df_subject_list:
            s = s
        else:
             return_df = return_df.append(pd.DataFrame([["",s,"","","","","","","","","",""]], columns=list(return_df.columns.values)))
    return return_df

def main(args):
    # Import missing_scans_followup_1y
    df = pd.read_csv(args.missingscanlog)

    # Get project from REDCap
    project_entry = get_project_entry()
    project_df = data_entry_fields(fields,project_entry,['1y_visit_arm_1'])

    # Extra dataframes needed
    subject_ids = pd.read_csv(args.subjectid)
    usability_report = pd.read_csv(args.usabilityreport)

    check_missing_sessions_df = check_missing_sessions(df,project_df,subject_ids)
    print("Checking on missing sessions\n")
    if check_missing_sessions_df['mri_xnat_sid'].tolist():
        print("Generating report\n")
        check_missing_sessions_df['mri_xnat_sid'].to_csv(os.path.join(args.csvoutputdirectory, "missing_sessions_scan.csv"), columns=list(usability_report.columns.values))
    else:
        print("No Missing Sessions\n")

    for s in args.scans:
        print("Check missing {}\n".format(s))
        check_missing_scan = check_missing_scans(df,usability_report,s)
        if check_missing_scan['subject_id'].tolist():
            print("Generating report\n")
            check_missing_scan.to_csv(os.path.join(args.csvoutputdirectory, "missing_{}_scan.csv".format(s)), columns=list(usability_report.columns.values))
        else:
            print("No {} Scans\n".format(s))


if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('-v','--visit',default=['1y_visit_arm_1'],
                        help="Input visit of interests as list in Redcap (i.e ['1y_visit_arm_1'])")
    parser.add_argument('-s','--scans',action = 'store', default=['t1','t2'],
                        help="Input scans of interests as list in missing_scan.log (i.e. ['t1','t2'])")
    parser.add_argument('-l','--missingscanlog',action = 'store',
                        help='missing_scan.log file (generated by pipeline/scripts/utils/list_missing_scans)')
    parser.add_argument('-i','--subjectid',action = 'store',
                        help='subject_id.csv file')
    parser.add_argument('-u','--usabilityreport',action = 'store',
                        help='usabilityreport.csv file (generated by scripts/reporting/baseline_1yr_cases.py)')
    parser.add_argument('-o','--csvoutputdirectory',action = 'store',
                        help='Output directory for report files')
    argv = parser.parse_args()
    sys.exit(main(args=argv))
