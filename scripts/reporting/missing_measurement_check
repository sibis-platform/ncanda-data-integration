#!/usr/bin/env python
##
##  Copyright 2015 SRI International
##  License: https://ncanda.sri.com/software-license.txt
##
"""
Report: Missing_subjects
============================================
compare list generated from pipeline with that from redcap 

Usage:
python missing_subjects.py pipeline_subject.log case.csv
 
"""
from __future__ import print_function

from builtins import str
import sys
import pandas

def in_dataframe(df_entry,df_list):
    df_list = df_list[df_list['study_id'] == df_entry.study_id]
    df_list = df_list[df_list['redcap_event_name'] == df_entry.redcap_event_name]
    if len(df_list) :
        return True
    
    return False

def main(args):
    redcap_list = pandas.read_csv(args.redcapcsv)
    redcap_list_base = redcap_list[redcap_list['redcap_event_name'] == 'baseline_visit_arm_1']
    if len(redcap_list_base) == 0 : 
        print("Error: Redcap file needs to include all baseline visits of the study")
        sys.exit(1)

    redcap_list_missing = redcap_list[redcap_list['visit_ignore___yes'] == 1]
    redcap_list_missing = redcap_list_missing[['study_id','redcap_event_name']]
    

    pipe_list = open(args.pipelinelist).readlines()

    #
    # Turn it into a redcap list 
    #
    pipe_list_missing = pandas.DataFrame(columns=['xnat_sid','study_id','redcap_event_name'])

    print("=======================")
    print("Check for errors in pipeline list:") 

    for sline in pipe_list:
        # print(sline)
        sub_arm_visit,reason = sline.split(' ')
        if reason != "missing\n" : 
            print("Do not know how to handle ", sline)
            continue 

        subject,arm,visit,rest = sub_arm_visit.split('/',3)
        if arm != "standard" :
            print(sub_arm_visit + " ignored - not part of standard")
            continue 
            
        if rest != "measures":
            # This tells us that the measures directory is not missing.
            # However, all the forms from the visit might still be missing.
            # This happens because the midyear visit forms are stored in the same directory
            # since they're from the midyear visit following this visit.
            # To check if the yearly visit is missing, it's sufficient to check if the
            # clinical form is missing, since it will always exist if the visit does.
            if 'clinical' not in rest:
                continue



        # Find redcap id from xnat subject id 
        redcap_subject = redcap_list_base[redcap_list_base['mri_xnat_sid']==subject]
        if len(redcap_subject)==0:
            print("{} not in REDCap".format(subject))
            continue 

        redcap_sid = redcap_subject['study_id'].values[0]

        # Map redcap event 
        if visit == "baseline" :
            event = "baseline_visit_arm_1"
        else : 
            event = str(visit.split("_")[1]) + "_visit_arm_1"

        pipe_list_missing = pandas.concat([
            pipe_list_missing,
            pandas.DataFrame([[subject, redcap_sid, event]], columns=['xnat_sid', 'study_id', 'redcap_event_name'])
        ], ignore_index=True)


    print(" ") 
    print("=======================")
    print("No visit date and not marked missing:")
    not_marked_missing = redcap_list['visit_ignore___yes']==0
    no_visit_date = redcap_list['visit_date'].isnull()
    matching_visits = redcap_list[(not_marked_missing) & (no_visit_date)][['study_id','redcap_event_name']]
    print(matching_visits.to_string(index=False))


    print(" ") 
    print("=======================")
    print("Missing in pipeline:") 
    for index,pipe_rd_entry in pipe_list_missing.iterrows():
        if not in_dataframe(pipe_rd_entry,redcap_list_missing):
            print(pipe_rd_entry.to_string())
            print(" ") 

    print(" ") 
    print("=======================")
    print("Is in pipeline and not in REDCap:") 
    for index,red_entry in redcap_list_missing.iterrows():
        if not in_dataframe(red_entry,pipe_list_missing):
            print("xnat_sid   ", redcap_list_base[redcap_list_base['study_id'] == red_entry.study_id]['mri_xnat_sid'].values[0])
            print(red_entry.to_string()) 
            print(" ") 

    print(" ") 

if __name__ == '__main__':
    import argparse

    formatter = argparse.RawDescriptionHelpFormatter
    parser = argparse.ArgumentParser(prog="missing_subjects",
                                     description=__doc__,
                                     formatter_class=formatter)
    parser.add_argument('pipelinelist', action='store',
                        help="The txt file containing the subjects in question - format <subject>/<arm>/<visit> <reason> - generated by utils/list_missing_scans")
    parser.add_argument('redcapcsv',  action="store",
                        help="The CSV containing the data from redcap - generated by scripts/reporting/create_redcap_visit_list.py")
    argv = parser.parse_args()
    sys.exit(main(args=argv))
