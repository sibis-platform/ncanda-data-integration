#!/usr/bin/env python
##
##  Copyright 2015 SRI International
##  License: https://ncanda.sri.com/software-license.txt
##
"""
Report: missing_images_check
============================================
compare list generated from pipeline with that from redcap 

Usage:
python missing_images_check.py pipeline_subject.csv case.csv
 
"""
from __future__ import print_function

import sys
import pandas


def in_dataframe(df_entry,df_list):
    df_list = df_list[df_list['case'] == df_entry.case]
    df_list = df_list[df_list['event'] == df_entry.event]
    df_list = df_list[df_list['type'] == df_entry.type]

    if len(df_list) :
        return True
    
    return False

#def matches_case_event_in_data_frame(df_entry,df_list):
#    df_list = df_list[df_list['case'] == df_entry.case]
#    df_list = df_list[df_list['event'] == df_entry.event]
#    if len(df_list) :
#        return True
#    
#    return False


def add_entry_to_red_list(redcap_pipe_list,red_entry,missing_type,redcap_list_base):
    xnat_sid = redcap_list_base[redcap_list_base['study_id'] == red_entry.study_id]['mri_xnat_sid'].values[0]
    # Map redcap event 
    red_event = red_entry.redcap_event_name
    red_visit,red_arm = red_event.split('_',1)

    if red_arm != "visit_arm_1" :
        print("Ignore ", red_entry, missing_type)
        return  
        
    if red_visit != "baseline" :
        red_visit = "followup_" + red_visit

    return pandas.concat([
        redcap_pipe_list,
        pandas.DataFrame([[red_entry.study_id, xnat_sid, red_visit, missing_type]],
                     columns=['study_id', 'case', 'event', 'type'])
    ], ignore_index=True)


def add_red_list(redcap_pipe_list,redcap_list_missing,missing_type,redcap_list_base):
    for i, red_entry in redcap_list_missing.iterrows():
        redcap_pipe_list = add_entry_to_red_list(redcap_pipe_list,red_entry,missing_type,redcap_list_base)
        
    return redcap_pipe_list

def main(args):

    pipe_missing_list = pandas.read_csv(args.pipelinecsv)
    # simplify list 
    pipe_missing_list['type'] = pipe_missing_list['type'].replace(['fieldmap-imaginary-1','fieldmap-real-1','fieldmap-imaginary-2','fieldmap-real-2','fieldmap-phase'],'fieldmap')
    pipe_missing_list = pipe_missing_list.drop_duplicates()

    #
    # Read REDCap List and turn into pipelist
    #
    redcap_list = pandas.read_csv(args.redcapcsv)
    redcap_list_base = redcap_list[redcap_list['redcap_event_name'] == 'baseline_visit_arm_1']
    if len(redcap_list_base) == 0 : 
        print("Error: Redcap file needs to include all baseline visits of the study")
        sys.exit(1)

    redcap_missing_list = pandas.DataFrame(columns=['study_id','case','event','type'])
    print("SESSION = measurements and images are missing") 

    print("=======================")
    print("Check REDCap entries:") 

    # List All Missing Sessions or  where the visit was completed but not mri_session

    missing_index = (redcap_list['visit_ignore___yes'] == 1) | (redcap_list['mri_missing'] == 1)
    redcap_session_missing = redcap_list[missing_index]
    redcap_missing_list = add_red_list(redcap_missing_list,redcap_session_missing,'SESSION',redcap_list_base)
    redcap_list = redcap_list[ ~ missing_index ]

    # List All Missing Image :
    for red_name,pipe_missing_type in [('mri_series_t1','t1'),('mri_series_t2','t2'),('mri_series_dti6b500pepolar','dti6-1'), ('mri_series_dti30b400','dti30-01'), ('mri_series_dti60b1000','dti60-01'), ('mri_series_rsfmri','bold-001'), ('mri_series_rsfmri_fieldmap','fieldmap')] :
        missing_index = pandas.isnull(redcap_list[red_name]) 
        redcap_missing_list = add_red_list(redcap_missing_list,redcap_list[missing_index],pipe_missing_type,redcap_list_base)

   # now check
    print("    Missing all modalities but not marked missing:")
    for index,VISIT in redcap_missing_list[redcap_missing_list['type'] == "t1"].iterrows() :
        redcap_missing_list_visit =  ((redcap_missing_list['study_id'] == VISIT['study_id']) & (redcap_missing_list['event'] == VISIT['event']))
        if len(redcap_missing_list[redcap_missing_list_visit].index) ==7 :
            print("     ",   VISIT['study_id'],  VISIT['event'])
           # still remove from redcap_list
           # replace with SESSION 
           #redcap_missing_list=redcap_missing_list[~redcap_missing_list_visit]
           # redcap_missing_list = add_red_list(redcap_missing_list,VISIT.to_frame(),'SESSION',redcap_list_base)
           #  print(redcap_missing_list[ ((redcap_missing_list['study_id'] == VISIT['study_id']) & (redcap_missing_list['event'] == VISIT['event']))])

    # redcap_missing_list.to_csv('/tmp/redcap_missing_list.csv',index=False)
    # sys.exit(0) 

    print(" ") 
    print("=======================")
    print("Missing in pipeline but not in REDCap - if value is SESSION then the entire session is missing in pipeline:") 
    modality_compatible = { "t1":"t2", "t2":"t1", "dti60-01": "dti6-1", "dti6-1":"dti60-01", "dti30-01": "dti60-01", "bold-001":"fieldmap", "fieldmap":"bold-001" } 
    for index,pipe_entry in pipe_missing_list.iterrows():
        # still has to be done 
        # and (not matches_case_event_in_data_frame(pipe_entry,redcap_session_missing)):
        # otherwise get some false positive 
        if not in_dataframe(pipe_entry,redcap_missing_list) :
           # Only print out if entire modality is missing as otherwise not ported to pipeline: 
           # e.g. T1 exists but not T2 then T1 is also not ported to pipeline  
           pipe_entry_tmp = pipe_entry.copy(True);
           pipe_entry_tmp.type = modality_compatible.get(pipe_entry.type)
           if not in_dataframe(pipe_entry_tmp,redcap_missing_list):
               print(redcap_list_base[redcap_list_base['mri_xnat_sid'] == pipe_entry.case]['study_id'].values[0], pipe_entry.values)

           
    print(" ") 
    print("=======================")
    print("Missing in REDCap but not in pipeline:") 
    for index,red_missing_entry in redcap_missing_list.iterrows():
        if not in_dataframe(red_missing_entry,pipe_missing_list):
            print(red_missing_entry.values)  

    print(" ") 

if __name__ == '__main__':
    import argparse

    formatter = argparse.RawDescriptionHelpFormatter
    parser = argparse.ArgumentParser(prog="missing_images_check",
                                     description=__doc__,
                                     formatter_class=formatter)
    parser.add_argument('pipelinecsv', action='store',
                        help="The csv file containing the missing images format: case,event,type - generated by scripts/utils/list_missing_scans")
    parser.add_argument('redcapcsv',  action="store",
                        help="The CSV containing the data from redcap - generated by scripts/reporting/create_redcap_visit_list.py")
    argv = parser.parse_args()
    sys.exit(main(args=argv))
