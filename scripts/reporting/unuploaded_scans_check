#!/usr/bin/env python

## Logic:
# 1. Load MR sessions and 
#   a. extract XNAT session IDs
#   b. determine which scans have not been uploaded
# 2. Load XNAT session in question and see if the missing scans are:
#   a. marked usable-extra
#   b. marked unusable, but there is no associated note

from __future__ import print_function
from builtins import str
import sys
import argparse

import pandas as pd
import numpy as np

import sibispy
from sibispy import sibislogger as slog

def main(args):
    slog.init_log(args.verbose, False, 'Detect potentially uploadable scans',
                  'unuploaded_scans_check', None)
    slog.startTimer1()

    # Set up Redcap
    session = sibispy.Session() 
    if not session.configure(ordered_config_load_flag = True) :
        if args.verbose:
            print("Error: session configure file was not found")
        sys.exit()

    redcap_api = session.connect_server('data_entry', True) 
    if not redcap_api: 
        if args.verbose:
            print("Error: Could not connect to Redcap") 
        sys.exit()

    # Load XNAT report from passed-in CSV
    xnat = pd.read_csv(args.xnatcsv)
    # Remove non-standard scans and make scan type simpler to allow for later comparison with Redcap
    xnat = xnat[xnat['scan_type'].str.contains("^ncanda-+", na=False) & ~xnat['scan_type'].str.contains("-bad$", na=False)]
    xnat.loc[:, 'scan_type'] = xnat.scan_type.apply(simplify_scan_name)

    # Null out any whitespace-only notes and create an indicator variable for scan note presence
    if "scan_note" in iter(xnat.columns): 
       xnat.loc[xnat['scan_note'].str.contains(r'^\s*$', na=False), 'scan_note'] = np.nan  
       xnat['has_note'] = xnat['scan_note'].notnull()
    else:
       print("WARNING: xnat report does not contain scan notes!") 
       xnat['has_note'] = False

    scan_fields = ['mri_series_t1', 'mri_series_t2', 'mri_series_dti6b500pepolar',
                   'mri_series_dti30b400', 'mri_series_dti60b1000', 'mri_series_dti_fieldmap',
                   'mri_series_rsfmri', 'mri_series_rsfmri_fieldmap']
    mr_sessions = redcap_api.export_records(forms=["visit_date", "mr_session_report"], 
            records=args.subjects, events=args.events, format_type="df")
    mr_sessions = mr_sessions[(mr_sessions['mri_missing'] != 1) & (mr_sessions["visit_ignore___yes"] != 1)]
    mr_sessions['ids'] = extract_scan_event_ids(mr_sessions, scan_fields)

    results = pd.DataFrame()
    mr_sessions["absent_scans"] = ""  # Unnecessary, since absent_scans are immediately consumed
    for idx, df_row in mr_sessions.iterrows():
        # Some form of apply or assign might work in later pandas versions
        empty_scans = extract_empty_scans(df_row, scan_fields)
        experiments = df_row['ids']
        for scan in empty_scans:
            scan = simplify_scan_name(scan)
            for experiment in experiments:
                hits = xnat[(xnat['experiment_id'] == experiment) & (xnat['scan_type'].str.contains(scan)) &
                            ((xnat['quality'] == 'usable-extra') | 
                                ((xnat['quality'] == 'unusable') & ~xnat['has_note']))]
                results = results.append(hits)  # handles empty data frames just fine
        mr_sessions.at[idx, "absent_scans"] = empty_scans

    return results.to_csv(args.outfile, index=False)

def simplify_scan_name(name):
    import re
    name = re.sub(r'^mri_series_', '', name)
    name = re.sub(r'^ncanda-+', '', name)
    name = re.sub(r'-v\d$|-notUsed$', '', name)
    name = re.sub(r'^(t\d)(spgr|fse)$', '\\1', name)
    return name

def extract_scan_event_ids(df, scan_fields):
    all_ids = (df[scan_fields]
               .apply(lambda x: " ".join(
                   [str(y) for y in x.drop_duplicates().tolist() if pd.notnull(y)]
               ), axis=1)
               .str.replace(r'/\d{1,2} ?', ' ', regex=True)  # remove scan specification
               .apply(lambda x: list(set(x.strip().split(' ')))))
    return all_ids

def extract_empty_scans(df_row, fields):
    null_cols = df_row[df_row.isnull()].index.tolist()
    empties = set(fields).intersection(set(null_cols))
    return list(empties)

if __name__ == '__main__':
    import argparse

    formatter = argparse.RawDescriptionHelpFormatter
    default = 'default: %(default)s'

    parser = argparse.ArgumentParser(prog="unuploaded_scans_check",
                                     description=__doc__,
                                     formatter_class=formatter)
    parser.add_argument("-v", "--verbose",
                        help="Verbose operation",
                        action="store_true")
    parser.add_argument('-e', '--events', dest="events", action='store',
            nargs="+",
            default=["baseline_visit_arm_1", "1y_visit_arm_1", "2y_visit_arm_1", "3y_visit_arm_1"])
    parser.add_argument('--xnat', dest="xnatcsv", action='store',
                        help="The csv file containing all EIDs generated by scripts/reporting/xnat_sessions_report.py",
                        type=argparse.FileType('r'))
    parser.add_argument('-s', '--study-id', dest="subjects",
                        help="One or more NCANDA IDs of interest", 
                        action='store',
                        nargs="+", default=None)
    parser.add_argument('-o', '--outfile',
                        help="Text file to write the results into", 
                        default=sys.stdout,
                        action='store',
                        type=argparse.FileType('w'))
    parsed_args = parser.parse_args()
    sys.exit(main(args=parsed_args))
