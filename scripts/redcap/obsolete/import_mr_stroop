#!/usr/bin/env python

##
##  See COPYING file distributed along with the ncanda-data-integration package
##  for the copyright and license terms
##

from __future__ import print_function
from builtins import str
import argparse
import sys
import os
import re
import subprocess
import tempfile
import shutil
import zipfile
import glob

import pandas

import sibispy
from sibispy import sibislogger as slog
import redcap

# Setup command line parser
parser = argparse.ArgumentParser( description="For all subjects and visits with MR reports in the REDCap database, find MR Stroop files and upload to REDCap", formatter_class=argparse.ArgumentDefaultsHelpFormatter )
parser.add_argument( "-v", "--verbose", help="Verbose operation", action="store_true")
parser.add_argument( "--max-days-after-visit", help="Maximum number of days the scan session can be after the entered 'visit date' in REDCap to be assigned to a given event.", action="store", default=30, type=int)
parser.add_argument( "-f", "--force-update", help="Update all records in REDCap, overwriting existing data", action="store_true")
parser.add_argument( "-e", "--with-excluded", help="Include records marked 'excluded' in REDCap", action="store_true")
parser.add_argument( "-n", "--no-upload", help="Only check correspondences; do not upload results to REDCap", action="store_true")
parser.add_argument("-p", "--post-to-github", help="Post all issues to GitHub instead of std out.", action="store_true")

args = parser.parse_args()

slog.init_log(args.verbose, args.post_to_github,'NCANDA Pipeline Feeder Messages', 'import_mr_stroop')

#
# Check for Stroop data (ePrime log file) in given XNAT session
#
import_bindir = os.path.join( os.path.dirname( os.path.dirname( os.path.abspath(__file__) ) ), 'import', 'laptops' )
bindir = os.path.dirname( os.path.abspath(__file__) )

def check_for_stroop( xnat, xnat_eid, redcap_key, verbose=False, no_upload=False, post_to_github=False):
    experiment = xnat.select.experiments[ xnat_eid ]

    # Get list of resource files that match the Stroop file name pattern
    experiment_files = []


    for resource in list(experiment.resources):
        resource_files = xnat._get_json( '/data/experiments/%s/resources/%s/files' % ( xnat_eid, resource ) );

        experiment_files += [ (resource, re.sub( r'.*\/files\/', '', file['URI']) ) for file in resource_files if re.match( r'^troop*.zip$', file['Name'] ) ]

        experiment_files += [ (resource, re.sub( r'.*\/files\/', '', file['URI']) ) for file in resource_files if re.match( r'^NCANDAStroopMtS_3cycles_7m53stask_.*.txt$', file['Name'] ) ]


    # No matching files - nothing to do
    if len( experiment_files ) == 0:
        return



    # Get first file from list, warn if more files
    (stroop_resource, stroop_file) = experiment_files[0]
    if len( experiment_files ) > 1:
        print("WARNING: experiment",xnat_eid,"has more than one Stroop .txt file - using file",stroop_file)

    if verbose:
        print("Importing Stroop data from file %s:%s" % ( xnat_eid, stroop_file ))

    # Download Stroop file from XNAT into temporary directory
    tempdir = tempfile.mkdtemp()
    stroop_file_path = experiment.resource( stroop_resource ).file( stroop_file ).get_copy( os.path.join( tempdir, stroop_file ) )



    if stroop_file_path.find ("zip") != -1:
       zip_handler=zipfile.ZipFile(stroop_file_path,'r')
       zip_handler.extractall(tempdir)
       stroop_file_path_zip=glob.glob(os.path.join(tempdir,"*.txt" ))
       stroop_file_path_zip+=glob.glob(os.path.join(tempdir,"*","*.txt" ))
       stroop_file_path=stroop_file_path_zip



    # Convert downloaded Stroop file to CSV scores file
    added_files = subprocess.check_output( [ os.path.join( import_bindir, "stroop2csv" ), '--mr-session', '--record', redcap_key[0], '--event', redcap_key[1], stroop_file_path, tempdir ] )

    if len( added_files ):
        if not no_upload:
            # Upload CSV file(s) (should only be one anyway)
            for file in added_files.split( '\n' ):
                if re.match( r'.*\.csv$', file ):
                    if verbose:
                        print("Uploading ePrime Stroop scores",file)
                    subprocess.call( [ os.path.join( bindir, 'csv2redcap' ), file ] )
            # Upload original ePrime file for future reference
            cmd_array = [ os.path.join( import_bindir, "eprime2redcap" ) ]
            if post_to_github: 
                cmd_array += ['-p']

            cmd_array += ['--project', 'data_entry', '--record' , redcap_key[0], '--event', redcap_key[1], stroop_file_path, 'mri_stroop_log_file' ] 
                
            if verbose:
                print("Uploading ePrime Stroop file",stroop_file_path)
                print(" ".join(cmd_array))

            subprocess.check_output( cmd_array )
    else:
        error = "ERROR: could not convert Stroop file"
        slog.info(xnat_eid, error, stroop_file = stroop_file)

    shutil.rmtree( tempdir )

# Open connection with REDCap server
session = sibispy.Session() 
if not session.configure() :
    if args.verbose:
        print("Error: session configure file was not found")
 
    sys.exit()

redcap_project = session.connect_server('data_entry') 
if not redcap_project : 
    if args.verbose:
        print("Error: Could not connect to Redcap") 

    sys.exit()

form_event_mapping = redcap_project.export_instrument_event_mappings( format_type='df' )

# Open connection with XNAT server
xnat = session.connect_server('xnat') 
if not xnat : 
    if args.verbose:
        print("Error: Could not connect to XNAT") 

    sys.exit()

#
# Main program loop
#
visit_log_redcap = redcap_project.export_records(fields=['dob', 'exclude', 'visit_date', 'mri_xnat_eids', 'mr_session_report_complete', 'mri_stroop_complete'], event_name='unique', format_type='df' )

# Select only events that have the "MRI Session Report" form
mri_events_list = form_event_mapping[form_event_mapping['form_name'] == 'mr_session_report' ]['unique_event_name'].tolist()
mr_sessions_redcap = visit_log_redcap[ visit_log_redcap.index.map( lambda x: x[1] in mri_events_list ) ][['visit_date', 'mri_xnat_eids', 'mr_session_report_complete', 'mri_stroop_complete']]
mr_sessions_redcap = mr_sessions_redcap[ mr_sessions_redcap['mr_session_report_complete'] > 0 ]

subject_data = visit_log_redcap.xs( 'baseline_visit_arm_1', level=1 )

# Filter out all records marked as "Complete", unless user instructed otherwise
if not args.force_update:
    mr_sessions_redcap = mr_sessions_redcap[ mr_sessions_redcap['mri_stroop_complete'] < 2 ]

if args.verbose:
    print("Checking %d REDCap records." % len( mr_sessions_redcap ))

# Iterate over all remaining rows
for [key,row] in mr_sessions_redcap.iterrows():
    if not subject_data['exclude'][key[0]] or args.with_excluded:
        visit_date = str(visit_log_redcap['visit_date'][key])
        if visit_date == 'nan':
            print("Missing '%s' date for subject %s" % ( key[1], key[0] ))
        else:
            try:
                for xnat_eid in row['mri_xnat_eids'].split( ' ' ):
                    check_for_stroop( xnat, xnat_eid, key, verbose=args.verbose, no_upload=args.no_upload,post_to_github=args.post_to_github)
            except AttributeError as e:
                error = "Error for xnat_eid: {}".format(e)
                slog.info(xnat_eid,error)
